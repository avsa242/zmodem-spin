{
    --------------------------------------------
    Filename: protocol.file-xfer.zmodem.spinh
    Author: Jesse Burt
    Description: ZModem file transfer protocol library
    Copyright (c) 2022
    Started Nov 28, 2021
    Updated Aug 5, 2022
    See end of file for terms of use.
    --------------------------------------------
}
#ifndef ZM_COMMON
#include "common.zmodem.spinh"
#endif
VAR

    long _subpsz
    long _f_sz

    long _crc32
    word _crc16

    byte _rxflags[4], _txflags[4]               ' position/flags
    byte _rxbuff[2058]                          ' accommodate worst case size
                                                ' (1k of entirely escaped chars
                                                ' plus frame end with all CRC
                                                ' bytes escaped)

    byte _f_name[13]                            ' 8.3 format, NUL

OBJ

    crc : "math.crc"
    str : "string"

PUB CheckCRC{}: crc_read | i
' Read CRC32 from remote device and compare it to calculated CRC
    repeat i from 0 to 3                        ' read the CRC
        crc_read.byte[i] := zdlread{}
    !_crc32

    if (crc_read <> _crc32)
        return ERROR

PUB GetFileInfo{}: frm_t | tmp[3], idx, rx
' Read file information subpacket
'   Returns: ZFILE frame type on success, ERROR otherwise
    if (zgethdr{} == ZFILE)
        _crc32 := $ffff_ffff                    ' init CRC

        bytefill(@_f_name, 0, 13)               ' extract filename
        idx := 0
        repeat
            rx := zgetchar
            _f_name[idx++] := rx
        until (rx == NUL)

        longfill(@tmp, 0, 3)                    ' extract file size
        idx := 0
        repeat
            rx := zgetchar
            tmp.byte[idx++] := rx
        until (rx == " ")
        tmp.byte[idx] := NUL                    ' terminate string
        _f_sz := str.atoi(@tmp)

        repeat                                  ' don't care about the rest
            tmp := zgetchar                     '   of the file info
        until (tmp == NUL)
        return ZFILE
    else
        return ERROR                            ' wrong or bad frame type

PUB ZMRX_Bin32Hdr{}: frm_t | i
' Receive a binary header, with CRC32
'   Returns: frame type of header received
    frm_t := charin{}

    _crc32 := $ffff_ffff                        ' init CRC
    updcrc32(frm_t)

    repeat i from 0 to 3
        _rxflags[i] := charin{}
        updcrc32(_rxflags[i])

    if (checkcrc{} <> ERROR)
        return frm_t
    else
        return ERROR

PUB ZMRX_FrameEnd{}: type | i, crc_read
' Receive frame end
'   Returns: frame end type
    repeat until charin{} == ZDLE
    type := zgetchar{}                          ' frame end type
    if checkcrc{} <> ERROR
        return type
    else
        return ERROR                            ' frame end CRC bad

PUB ZMRX_HexHdr{}: frm_t | read_crc, i
' Receive a HEX header
'   Returns: frame type of header received
    _crc16 := 0                                 ' init CRC

    frm_t := zm_gethex{}                        ' get frame type
    updcrc16(frm_t)
'    ser.printf1(string("RX frm type: %x\n"), frm_t)
    repeat i from 0 to 3                        ' get pos/flags ASCII
        _rxflags[i] := zm_gethex{}
        updcrc16(_rxflags[i])

    read_crc := 0
    read_crc.byte[1] := zm_gethex{}             ' get CRC16
    read_crc.byte[0] := zm_gethex{}
'    ser.printf2(string("read: %x   calc: %x\n"), read_crc, _crc16)
    if (read_crc == _crc16)
        return frm_t                            ' CRC good; return frame type
    else
        return ERROR                            ' CRC bad

PUB ZM_GetHex{}: ihex | tmp
' Receive two hex digits in ASCII and return the integer equivalent
    tmp.byte[0] := charin{}
    tmp.byte[1] := charin{}
    tmp.byte[2] := NUL
    return str.atoib(@tmp, 16)

PUB ZMTX_BinHeader(encoding, frm_t, posflag) | i, b
' transmit a binary header
'   encoding: ZBIN or ZBIN32
'   frm_t: frame type
'   posflag: 4-byte position, or flags
    char(ZPAD)
    char(ZDLE)
    char(encoding)
    zmtx_enc(frm_t)

    _crc32 := $ffff_ffff                        ' init CRC
    updcrc32(frm_t)

    repeat i from 0 to 3                        ' transmit position/flags
        b := byte[posflag][i]
        zmtx_enc(b)
        updcrc32(b)

    !_crc32
    if (encoding == ZBIN32)                     ' transmit CRC
        repeat i from 0 to 3
            zmtx_enc(_crc32.byte[i])
    else
        return ERROR

PUB ZMTX_DataSubpkt(ptr_data, st, len, frameend): xfer | pos
' Transmit data subpacket
'   ptr_data: pointer to buffer of data to transmit
'   st: starting position within data
'   len: length of data to transmit
'   frameend: frame end type
'   Returns: number of bytes transferred
    _crc32 := $ffff_ffff                        ' init CRC

    xfer := 0
    repeat pos from st to (st+len-1)
        updcrc32(byte[ptr_data][pos])           ' calc 'rolling' CRC
        xfer += zmtx_enc(byte[ptr_data][pos])   ' transmit ZDLE-encoded data
    updcrc32(frameend)                          ' add frame end byte to the CRC
    !_crc32

    zmtx_frameend(frameend)

PUB ZMTX_Enc(ch): xfer | ech
' Transmit ZDLE-encoded char
'   Returns: number of bytes transferred
    if lookdown(ch: CR, ZDLE, DLE, XON, XOFF, DLE80, XON80, XOFF80)
        char(ZDLE)                              ' escape next char
        char(ch ^ $40)                          '
    else
        char(ch)                                ' not a ctrl code; don't escape
    xfer++

PUB ZMTX_FileInfo{} | i, tmp, b
' Send file information
    _crc32 := $ffff_ffff                        ' init CRC

    repeat i from 0 to strsize(@_f_name)        ' send filename
        b := byte[@_f_name][i]
        zputchar(b)

    str.itoa(_f_sz, @tmp)                       ' send file size
    repeat i from 0 to strsize(tmp)-1
        b := byte[tmp][i]
        zputchar(b)

    zputchar(" ")

    repeat 5                                    ' send other file info as 0
        zputchar("0")                           '   (don't care)
        zputchar(" ")

    zputchar(NUL)                               ' terminate subpacket data

    updcrc32(ZCRCW)                             ' incorp. frame end into CRC
    !_crc32

    zmtx_frameend(ZCRCW)
    char(XON)                                   ' trailing XON

PUB ZMTX_FrameEnd(type) | i
' Transmit frame end
'   type: frame end type
    char(ZDLE)
    char(type)
    repeat i from 0 to 3                        ' send the CRC
        zmtx_enc(_crc32.byte[i])

PUB ZMTX_HexHeader(frm_t, posflag) | i
' Transmit a hex header
'   type: frame type
'   posflag: 4-byte position, or flags
    char(ZPAD)
    char(ZPAD)
    char(ZDLE)
    char(ZHEX)

    zputhex(frm_t)                              ' frame type

    repeat i from 0 to 3                        ' transmit pos/flag bytes
        zputhex(posflag.byte[i])

    _crc16 := 0                                 ' init CRC
    updcrc16(frm_t)                             ' calc CRC over frame type
    repeat i from 0 to 3                        '   and pos/flag bytes
        updcrc16(posflag.byte[i])

    zputhex(_crc16.byte[1])                     ' send the CRC
    zputhex(_crc16.byte[0])

    char(CR)                                    ' terminate header
    char(LF)

    if (frm_t <> ZFIN) and (frm_t <> ZACK)      ' if not ZFIN or ZACK frame,
        char(XON)                               '   append an XON

PUB zdlread{}: ch
' Read a data subpacket byte
'   NOTE: Checks for ZModem escape encoding to handle
'       * aborted transmission (CAN)
'       * frame end types
'       * other escaped characters
    ch := charin{}
    if (ch == ZDLE)                             ' ZDLE? _could_ be CAN (same)
        repeat
            ch := charin{}                      ' check for CAN
            if ch == CAN
                ch := charin{}
                if ch == CAN
                    ch := charin{}
                    if ch == CAN
                        return GOTCAN           ' 4xCAN recv'd: tell the caller
            case ch
                ZCRCE, ZCRCG, ZCRCQ, ZCRCW:     ' frame end
                    return (ch | GOTOR)
                {ZRUB0:                         ' XXX these really needed?
                    return $7F
                ZRUB1:
                    return $FF
                19, 147, 17, 145: '19=DC3, 147=SET TX ST, 17=DC1, 145=PVT USE 1
                    next}
                other:                          ' escaped char
                    if ((ch & $60) == $40)
                        return (ch ^ $40)
            return ERROR                        ' bad escape sequence
    else
        return ch                               ' wasn't escaped; just literal

PUB zgetchar{}: ch
' Receive a character (unprocessed) and update the CRC
    ch := charin{}
    updcrc32(ch)

PUB zgethdr{}: frm_t | encoding
' Get frame header, and receive a binary or hex frame type
    repeat until charin{} == ZPAD
    repeat until charin{} == ZDLE
    encoding := charin{}

    case encoding
        ZBIN:   'XXX not handled yet
            return ERROR
        ZBIN32:
            return zmrx_bin32hdr{}
        ZHEX:
            return zmrx_hexhdr{}
        other:
            return ERROR

PUB zputhex(val) | tmp
' Send a two-digit hex number, given integer val
    tmp := str.hexs(val, 2)
    char(byte[tmp][0])
    char(byte[tmp][1])

PUB zputchar(ch)
' Send a character (unprocessed) and update the CRC
    char(ch)
    updcrc32(ch)

PUB UpdCRC16(crcbyte)
' Update CRC16 with crcbyte
    _crc16 := crc.crc16(@crcbyte, 1, _crc16, 0, crc#POLY16_XYZMODEM, false, false)

PUB UpdCRC32(crcbyte)
' Update CRC32 with crcbyte
    _crc32 := crc.crc32(@crcbyte, 1, _crc32, 0, crc#POLY32_ZMODEM, false, false)

DAT
{
Copyright 2022 Jesse Burt

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
associated documentation files (the "Software"), to deal in the Software without restriction,
including without limitation the rights to use, copy, modify, merge, publish, distribute,
sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or
substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}

